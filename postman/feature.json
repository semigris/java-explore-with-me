{
	"info": {
		"_postman_id": "5e35f96f-b27e-4dd8-92ac-1331cec1a32e",
		"name": "Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15781658"
	},
	"item": [
		{
			"name": "Valid Cases",
			"item": [
				{
					"name": "Создание нового (Comment1) комментария к событию (Event1) текущим пользователем (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid1\", user.id)\r",
									"        console.log(\"User1 получил id:\", pm.collectionVariables.get(\"uid1\"));\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id)\r",
									"        console.log(\"Event1 получил id:\", pm.collectionVariables.get(\"eid1\"));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text);\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"updateDateComment1\", target.updated)\r",
									"pm.collectionVariables.set(\"cid1\", target.id)\r",
									"console.log(\"Comment1 получил id:\", pm.collectionVariables.get(\"cid1\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария (Comment1) (публикация)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.equal(pm.collectionVariables.get(\"cid1\"));\r",
									"    pm.expect(target.status).equal('PUBLISHED');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария (Comment1) текущим пользователем (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('eventId')\r",
									"    pm.expect(target).to.have.property('authorId');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('status');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text);\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"    pm.expect(target.updated).not.equal(pm.collectionVariables.get(\"updateDateComment1\"));\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Updated Comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "commentId",
									"value": "{{cid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового (Comment2) комментария к событию (Event1) текущим пользователем (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text);\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"cid2\", target.id)\r",
									"console.log(\"Comment2 получил id:\", pm.collectionVariables.get(\"cid2\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Comment2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария (Comment2) (публикация)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.status).equal('PUBLISHED');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового комментария (Comment3) к событию (Event1) новым пользователем (User2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid2\", user.id)\r",
									"        console.log(\"User2 ID установлен:\", pm.collectionVariables.get(\"uid2\"));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text);\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"cid3\", target.id)\r",
									"console.log(\"Comment3 получил id:\", pm.collectionVariables.get(\"cid3\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User2 Comment3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария (Comment3) (отклонение комментария)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.status).equal('CANCELED');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"CANCELED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о конкретном комментарии (Comment1) текущего пользователя (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, text, authorId, text, status, created, updated\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('authorId');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('status');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(pm.collectionVariables.get(\"cid1\"));\r",
									"    pm.expect(target.eventId).equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(target.authorId).equal(pm.collectionVariables.get(\"uid1\"));;\r",
									"    pm.expect(target.text).equal('User1 Updated Comment1');\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "commentId",
									"value": "{{cid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев к событию (Event1) пользователем (User1).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Каждый комментарий должен содержать поля: id, eventId, authorId, text, status, created, updated\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"\r",
									"    response.forEach(comment => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('created');\r",
									"        pm.expect(comment).to.have.property('updated');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Данные первого комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const firstComment = response[0];\r",
									"\r",
									"    pm.expect(firstComment.id).to.equal(pm.collectionVariables.get(\"cid1\"));\r",
									"    pm.expect(firstComment.eventId).to.equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(firstComment.authorId).to.equal(pm.collectionVariables.get(\"uid1\"));\r",
									"    pm.expect(firstComment.text).to.equal('User1 Updated Comment1');\r",
									"    pm.expect(firstComment.status).to.equal('PENDING');\r",
									"    pm.expect(firstComment.created).to.not.be.null;\r",
									"    pm.expect(firstComment.updated).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Данные второго комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const secondComment = response[1];\r",
									"\r",
									"    pm.expect(secondComment.id).to.equal(pm.collectionVariables.get(\"cid2\"));\r",
									"    pm.expect(secondComment.eventId).to.equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(secondComment.authorId).to.equal(pm.collectionVariables.get(\"uid1\"));\r",
									"    pm.expect(secondComment.text).to.equal('User1 Comment2');\r",
									"    pm.expect(secondComment.status).to.equal('PUBLISHED');\r",
									"    pm.expect(secondComment.created).to.not.be.null;\r",
									"    pm.expect(secondComment.updated).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев к событию (Event1) пользователем (User2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Каждый комментарий должен содержать поля: id, eventId, authorId, text, status, created, updated\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"\r",
									"    response.forEach(comment => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('created');\r",
									"        pm.expect(comment).to.have.property('updated');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Данные первого комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const firstComment = response[0];\r",
									"\r",
									"    pm.expect(firstComment.id).to.equal(pm.collectionVariables.get(\"cid3\"));\r",
									"    pm.expect(firstComment.eventId).to.equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(firstComment.authorId).to.equal(pm.collectionVariables.get(\"uid2\"));\r",
									"    pm.expect(firstComment.text).to.equal('User2 Comment3');\r",
									"    pm.expect(firstComment.status).to.equal('CANCELED');\r",
									"    pm.expect(firstComment.created).to.not.be.null;\r",
									"    pm.expect(firstComment.updated).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового (Comment4) комментария к событию (Event2) текущим пользователем (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id)\r",
									"        console.log(\"Event1 получил id:\", pm.collectionVariables.get(\"eid2\"));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('eventId')\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text);\r",
									"    pm.expect(target.status).equal('PENDING');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"updateDateComment1\", target.updated)\r",
									"pm.collectionVariables.set(\"cid4\", target.id)\r",
									"console.log(\"Comment4 получил id:\", pm.collectionVariables.get(\"cid4\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Comment4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "eventId",
									"value": "{{eid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск комментариев по статусу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Каждый комментарий должен содержать поля: id, eventId, authorId, text, status, created, updated\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"\r",
									"    response.forEach(comment => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('created');\r",
									"        pm.expect(comment).to.have.property('updated');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Данные первого комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const firstComment = response[0];\r",
									"\r",
									"    pm.expect(firstComment.id).to.equal(pm.collectionVariables.get(\"cid1\"));\r",
									"    pm.expect(firstComment.eventId).to.equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(firstComment.authorId).to.equal(pm.collectionVariables.get(\"uid1\"));\r",
									"    pm.expect(firstComment.text).to.equal('User1 Updated Comment1');\r",
									"    pm.expect(firstComment.status).to.equal('PENDING');\r",
									"    pm.expect(firstComment.created).to.not.be.null;\r",
									"    pm.expect(firstComment.updated).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Данные второго комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const secondComment = response[1];\r",
									"\r",
									"    pm.expect(secondComment.id).to.equal(pm.collectionVariables.get(\"cid4\"));\r",
									"    pm.expect(secondComment.eventId).to.equal(pm.collectionVariables.get(\"eid2\"));\r",
									"    pm.expect(secondComment.authorId).to.equal(pm.collectionVariables.get(\"uid1\"));\r",
									"    pm.expect(secondComment.text).to.equal('User1 Comment4');\r",
									"    pm.expect(secondComment.status).to.equal('PENDING');\r",
									"    pm.expect(secondComment.created).to.not.be.null;\r",
									"    pm.expect(secondComment.updated).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?status=PENDING",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "status",
									"value": "PENDING"
								},
								{
									"key": "eventId",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск комментариев по статусу и событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Каждый комментарий должен содержать поля: id, eventId, authorId, text, status, created, updated\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"\r",
									"    response.forEach(comment => {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('created');\r",
									"        pm.expect(comment).to.have.property('updated');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Данные первого комментария в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array').and.to.have.length.greaterThan(0);\r",
									"\r",
									"    const firstComment = response[0];\r",
									"\r",
									"    pm.expect(firstComment.id).to.equal(pm.collectionVariables.get(\"cid1\"));\r",
									"    pm.expect(firstComment.eventId).to.equal(pm.collectionVariables.get(\"eid1\"));\r",
									"    pm.expect(firstComment.authorId).to.equal(pm.collectionVariables.get(\"uid1\"));\r",
									"    pm.expect(firstComment.text).to.equal('User1 Updated Comment1');\r",
									"    pm.expect(firstComment.status).to.equal('PENDING');\r",
									"    pm.expect(firstComment.created).to.not.be.null;\r",
									"    pm.expect(firstComment.updated).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?status=PENDING&eventId={{eid1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "status",
									"value": "PENDING"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid4}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Not valid cases",
			"item": [
				{
					"name": "Модерация комментария (повторная публикация)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Комментарий уже одобрен');\r",
									"    pm.expect(target.reason).equal('Конфликт при обработке запроса');\r",
									"    pm.expect(target.status).equal('CONFLICT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария (повторное отклонение)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Комментарий уже отклонен');\r",
									"    pm.expect(target.reason).equal('Конфликт при обработке запроса');\r",
									"    pm.expect(target.status).equal('CONFLICT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"CANCELED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Модерация комментария (несуществующий id)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Комментарий с id: 42 не найден');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\":\"CANCELED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск комментариев по несуществующему статусу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Некорректный статус комментария: DOWNLOAD');\r",
									"    pm.expect(target.reason).equal('Неверный формат или содержимое запроса');\r",
									"    pm.expect(target.status).equal('BAD_REQUEST');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?status=DOWNLOAD",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "status",
									"value": "DOWNLOAD"
								},
								{
									"key": "eventId",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск комментариев по корректному статусу и несуществующему событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Событие с id: 42 не найдено');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?status=PENDING&eventId=42",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "status",
									"value": "PENDING"
								},
								{
									"key": "eventId",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Комментарий с id: 42 не найден');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового комментария к несуществующему событию текущим пользователем (User1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Событие с id: 42 не найдено');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "eventId",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового комментария к событию (Event1) несуществующим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Пользователь с id: 42 не найден');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "42"
								},
								{
									"key": "eventId",
									"value": "{{eid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария (Comment1) не его автором (User2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Изменить можно только свой комментарий');\r",
									"    pm.expect(target.reason).equal('Конфликт при обработке запроса');\r",
									"    pm.expect(target.status).equal('CONFLICT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"User1 Updated Comment1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								},
								{
									"key": "commentId",
									"value": "{{cid1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о конкретном комментарии (Comment1) не его автором (User2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.request;\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason')\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.message).equal('Комментарий с id: 1 от пользователя с id:2 не найден');\r",
									"    pm.expect(target.reason).equal('Запрашиваемый ресурс не найден');\r",
									"    pm.expect(target.status).equal('NOT_FOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid2}}"
								},
								{
									"key": "commentId",
									"value": "{{cid1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "uid2",
			"value": ""
		},
		{
			"key": "eid1",
			"value": ""
		},
		{
			"key": "eid2",
			"value": ""
		},
		{
			"key": "cid1",
			"value": ""
		},
		{
			"key": "cid2",
			"value": ""
		},
		{
			"key": "cid3",
			"value": ""
		},
		{
			"key": "cid4",
			"value": ""
		},
		{
			"key": "updateDateComment1",
			"value": ""
		}
	]
}